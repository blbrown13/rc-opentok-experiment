import {OpentokService} from './opentok.service';
import {filter, mergeMap, switchMap, switchMapTo, tap} from "rxjs/operators";
import {OtEventNames} from './opentok.model';
import data from './secrets.json';

const otService = new OpentokService();
const initializedTokBoxSession = otService.initSession(data.apiKey, data.sessionId);

initializedTokBoxSession.pipe(
  switchMapTo(otService.connectSession(data.token)),
).subscribe({
  next: n => console.log('Success initLiveSession', n),
  error: e => console.log('Fail initLiveSession', e),
});

otService.coachStreamLifecycleEvents$.pipe(
  filter(event => event.type === OtEventNames.StreamCreated),
  switchMap(event => otService.sessionMediaSubscribe('camera-outlet', event['stream'], {
    fitMode: 'contain',
    height: '100%',
    insertMode: 'append',
    showControls: false,
    subscribeToAudio: false,
    subscribeToVideo: true,
    width: '100%',
  }))
).subscribe({
  next: n => console.log('Connect to coach video - success', n),
  error: e => console.log('Connect to coach video - fail', e),
});


/**
 * Subscribes to the audio stream generated by members joining the session.
 * Must be subscribed after the view initializes because we need a references to elements on the page.
 */
otService.memberStreamLifecycleEvents$
  .pipe(
    // takeUntil(this.destroy$),
    tap((_) => console.log('memberStreamLifecycleEvents$ pre filter', _)),
    filter((event) => event.type === OtEventNames.StreamCreated),
    tap((_) => console.log('memberStreamLifecycleEvents$ post filter', _)),
    mergeMap((event) =>
        otService
          .sessionMediaSubscribe('ao-member-audio', event['stream'], {
            insertMode: 'append',
            subscribeToAudio: true,
            subscribeToVideo: false,
          })
      /*
      .pipe(
        tap((_) => console.log('memberStreamLifecycleEvents$ pre retry', _)),
        retry(2),
        tap((classMateSubscription) =>
          classMateSubscription.on(
            OtEventNames.AudioLevelUpdated,
            (chatter: OT.Event<OtEventNames.AudioLevelUpdated, OT.Stream>) =>
              this.membersAudioLevelChangeEvent$.next(chatter)
          )
        )
      )
    */
    )
  )
  .subscribe({
    next: s => console.log('Subscribe to other members audio - success', s),
    error: e => console.error('Subscribe to other members audio - fail', e),
  });


otService
  .sessionMediaInitPublisher('ai-member-audio', {
    fitMode: 'contain',
    height: 0,
    insertMode: 'append',
    mirror: false,
    publishAudio: false,
    publishVideo: false,
    style: {
      buttonDisplayMode: 'off',
    },
    videoSource: null,
    width: 0,
  }).subscribe({
  next: s => console.log('Published your audio - success', s),
  error: e => console.log('Published your audio - fail', e),
});
  /*
  .pipe(
    tap((publisher) => {
      // Emits a value if the browser security restrictions on mic changes
      publisher.on({
        accessDenied: () => {
          this.uiStateMicrophone$.next(MicrophoneState.Blocked);
          this.opentokService.coachCommunicationConnection$
            .pipe(
              switchMap((connection) =>
                this.opentokService.sendSessionSignal({
                  type: Signal.StageRequestCanceled,
                  data: this.opentokService.connectionId,
                  to: connection,
                })
              )
            )
            .subscribe();
        },
      });
    }),
    catchError((err) => {
      console.log.error(err);
      this.uiStateMicrophone$.next(MicrophoneState.Muted);
      throw err;
    })
  );
*/
